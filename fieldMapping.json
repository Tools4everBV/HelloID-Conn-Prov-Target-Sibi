{
  "Version": "v1",
  "MappingFields": [
    {
      "Name": "first_name",
      "Description": "",
      "Type": "Text",
      "MappingActions": [
        {
          "MapForActions": [
            "Create",
            "Update"
          ],
          "MappingMode": "Field",
          "Value": "\"Person.Name.NickName\"",
          "UsedInNotifications": false,
          "StoreInAccountData": true
        }
      ]
    },
    {
      "Name": "employee_number",
      "Description": "[Required]",
      "Type": "Text",
      "MappingActions": [
        {
          "MapForActions": [
            "Create",
            "Update"
          ],
          "MappingMode": "Field",
          "Value": "\"Person.ExternalId\"",
          "UsedInNotifications": false,
          "StoreInAccountData": true
        }
      ]
    },
    {
      "Name": "email",
      "Description": "",
      "Type": "Text",
      "MappingActions": [
        {
          "MapForActions": [
            "Create",
            "Update"
          ],
          "MappingMode": "Complex",
          "Value": "\"function getEmail(){\\r\\n    let email = Person.Accounts.MicrosoftActiveDirectory.mail;\\r\\n\\r\\n    return email;\\r\\n}\\r\\n\\r\\ngetEmail();\"",
          "UsedInNotifications": false,
          "StoreInAccountData": true
        }
      ]
    },
    {
      "Name": "departments",
      "Description": "[Optional] List of departments.\nThis field should always be set to a 'None' mapping. It is only supported for the 'Create' and 'Update' actions.\nThe field is populated via scripts because it requires an array of objects, which is not supported by the current HelloID field mapping.",
      "Type": "Text",
      "MappingActions": [
        {
          "MapForActions": [
            "Create",
            "Update"
          ],
          "MappingMode": "None",
          "Value": "\"\"",
          "UsedInNotifications": false,
          "StoreInAccountData": true
        }
      ]
    },
    {
      "Name": "job_positions",
      "Description": "[Optional] List of departments.\nThis field should always be set to a 'None' mapping. It is only supported for the 'Create' and 'Update' actions.\nThe field is populated via scripts because it requires an array of objects, which is not supported by the current HelloID field mapping.",
      "Type": "Text",
      "MappingActions": [
        {
          "MapForActions": [
            "Create",
            "Update"
          ],
          "MappingMode": "None",
          "Value": "\"\"",
          "UsedInNotifications": false,
          "StoreInAccountData": true
        }
      ]
    },
    {
      "Name": "employment_end",
      "Description": "[Required] The employee’s end date of employment.\nThis field disables the Sibi account on the end date and should always be set to the latest end date of all valid contracts. If no valid contracts exist, the latest end date of all contracts is used. If at least one contract has an indefinite end date, this field remains empty.",
      "Type": "Text",
      "MappingActions": [
        {
          "MapForActions": [
            "Create",
            "Update",
            "Enable",
            "Disable"
          ],
          "MappingMode": "Field",
          "Value": "\"Person.PrimaryContract.Custom.OriginalDischargeDate\"",
          "UsedInNotifications": false,
          "StoreInAccountData": true
        }
      ]
    },
    {
      "Name": "employment_start",
      "Description": "[Required] The employee’s start date of employment.\nThis field enables the Sibi account on the employee’s start date and should always be set to their first start date, as it determines their tenure and work anniversary.",
      "Type": "Text",
      "MappingActions": [
        {
          "MapForActions": [
            "Create",
            "Update",
            "Enable",
            "Disable"
          ],
          "MappingMode": "Field",
          "Value": "\"Person.PrimaryContract.Custom.OriginalHireDate\"",
          "UsedInNotifications": false,
          "StoreInAccountData": true
        }
      ]
    },
    {
      "Name": "phone",
      "Description": "",
      "Type": "Text",
      "MappingActions": [
        {
          "MapForActions": [
            "Create",
            "Update"
          ],
          "MappingMode": "Field",
          "Value": "\"Person.Contact.Business.Phone.Fixed\"",
          "UsedInNotifications": false,
          "StoreInAccountData": true
        }
      ]
    },
    {
      "Name": "last_name",
      "Description": "",
      "Type": "Text",
      "MappingActions": [
        {
          "MapForActions": [
            "Create",
            "Update"
          ],
          "MappingMode": "Complex",
          "Value": "\"// generateSurnameOption1.js [https://github.com/Tools4everBV/HelloID-Lib-Prov-HelperFunctions/blob/master/Javascript/Target/Surname_Lastname/Scripts/generateSurnameOption1.js]\\r\\n//\\r\\n// Mapping logic to generate the Surname according to the following convention.\\r\\n// B\\tvan den Boele\\r\\n// BP\\tvan den Boele – de Vries\\r\\n// P\\tde Vries\\r\\n// PB   de Vries – van den Boele\\r\\nfunction generateSurname() {\\r\\n    let middleName = Person.Name.FamilyNamePrefix;\\r\\n    let lastName = Person.Name.FamilyName;\\r\\n    let middleNamePartner = Person.Name.FamilyNamePartnerPrefix;\\r\\n    let lastNamePartner = Person.Name.FamilyNamePartner;\\r\\n    let convention = Person.Name.Convention;\\r\\n\\r\\n    let surName = '';\\r\\n    switch (convention) {\\r\\n        case \\\"BP\\\":\\r\\n            if (typeof middleName !== 'undefined' && middleName) { surName = surName + middleName + ' ' }\\r\\n            surName = surName + lastName;\\r\\n\\r\\n            surName = surName + ' - ';\\r\\n            if (typeof middleNamePartner !== 'undefined' && middleNamePartner) { surName = surName + middleNamePartner + ' ' }\\r\\n            surName = surName + lastNamePartner;\\r\\n            break;\\r\\n        case \\\"PB\\\":\\r\\n            if (typeof middleNamePartner !== 'undefined' && middleNamePartner) { surName = surName + middleNamePartner + ' ' }\\r\\n            surName = surName + lastNamePartner;\\r\\n\\r\\n            surName = surName + ' - ';\\r\\n            if (typeof middleName !== 'undefined' && middleName) { surName = surName + middleName + ' ' }\\r\\n            surName = surName + lastName;\\r\\n            break;\\r\\n        case \\\"P\\\":\\r\\n            if (typeof middleNamePartner !== 'undefined' && middleNamePartner) { surName = surName + middleNamePartner + ' ' }\\r\\n            surName = surName + lastNamePartner;\\r\\n            break;\\r\\n        case \\\"B\\\":\\r\\n        default:\\r\\n            if (typeof middleName !== 'undefined' && middleName) { surName = surName + middleName + ' ' }\\r\\n            surName = surName + lastName;\\r\\n            break;\\r\\n    }\\r\\n    // Trim spaces at start and end\\r\\n    surName = surName.trim();\\r\\n\\r\\n    return surName;\\r\\n}\\r\\n\\r\\ngenerateSurname();\"",
          "UsedInNotifications": false,
          "StoreInAccountData": true
        }
      ]
    },
    {
      "Name": "id",
      "Description": "[Required] The unique identifier for the user.\nThis field should always be set to a 'None' mapping and is used as the AccountReference.",
      "Type": "Text",
      "MappingActions": [
        {
          "MapForActions": [
            "Create"
          ],
          "MappingMode": "None",
          "Value": "\"\"",
          "UsedInNotifications": false,
          "StoreInAccountData": true
        }
      ]
    },
    {
      "Name": "birthdate",
      "Description": "[Optional] The employee’s birthdate.\nThis field is formatted as \"yyyy-MM-dd\". If the birthdate is available, it is converted into the correct format.",
      "Type": "Text",
      "MappingActions": [
        {
          "MapForActions": [
            "Create",
            "Update"
          ],
          "MappingMode": "Complex",
          "Value": "\"function convertDate(date) {\\n    // Get day, month, and year components\\n    const day = date.getDate().toString().padStart(2, '0');\\n    const month = (date.getMonth() + 1).toString().padStart(2, '0');\\n    const year = date.getFullYear();\\n\\n    // Format the date as \\\"yyyy-MM-dd\\\"\\n    return year + '-' + month + '-' + day;\\n}\\n\\n// Example usage:\\nfunction getBirthDate(){\\n    let inputDate = Person.Details.BirthDate;\\n    let returnDate = inputDate ? convertDate(new Date(inputDate)) : null;\\n\\n    return returnDate;\\n}\\n\\ngetBirthDate();\"",
          "UsedInNotifications": false,
          "StoreInAccountData": false
        }
      ]
    },
    {
      "Name": "phone_mobile_private",
      "Description": "[Optional] The employee’s private mobile phone number.\nIf provided, the number is reformatted by replacing the leading '06' with '+316' and removing any spaces. In Sibi, '06' is automatically converted to '+316'. To prevent unnecessary updates, this conversion should already be handled in the field mapping.",
      "Type": "Text",
      "MappingActions": [
        {
          "MapForActions": [
            "Create",
            "Update"
          ],
          "MappingMode": "Complex",
          "Value": "\"function getMobilePrivatePhone() {\\r\\n    let mobilePrivatePhone = Person.Contact.Personal.Phone.Mobile;\\r\\n\\r\\n    if (mobilePrivatePhone) {\\r\\n        // Replace the starting '06' with '+316'\\r\\n        mobilePrivatePhone = mobilePrivatePhone.replace(/^06/, \\\"+316\\\");\\r\\n\\r\\n        // Remove all spaces from the phone number\\r\\n        mobilePrivatePhone = mobilePrivatePhone.replace(/\\\\s/g, \\\"\\\");\\r\\n    }\\r\\n\\r\\n    return mobilePrivatePhone;\\r\\n}\\r\\n\\r\\ngetMobilePrivatePhone();\"",
          "UsedInNotifications": false,
          "StoreInAccountData": true
        }
      ]
    },
    {
      "Name": "phone_mobile",
      "Description": "[Optional] The employee’s business mobile phone number.\nIf provided, the number is reformatted by replacing the leading '06' with '+316' and removing any spaces. In Sibi, '06' is automatically converted to '+316'. To prevent unnecessary updates, this conversion should already be handled in the field mapping.",
      "Type": "Text",
      "MappingActions": [
        {
          "MapForActions": [
            "Create",
            "Update"
          ],
          "MappingMode": "Complex",
          "Value": "\"function getMobilePhone() {\\r\\n    let mobilePhone = Person.Contact.Business.Phone.Mobile;\\r\\n\\r\\n    if (mobilePhone) {\\r\\n        // Replace the starting '06' with '+316'\\r\\n        mobilePhone = mobilePhone.replace(/^06/, \\\"+316\\\");\\r\\n\\r\\n        // Remove all spaces from the phone number\\r\\n        mobilePhone = mobilePhone.replace(/\\\\s/g, \\\"\\\");\\r\\n    }\\r\\n\\r\\n    return mobilePhone;\\r\\n}\\r\\n\\r\\ngetMobilePhone();\"",
          "UsedInNotifications": false,
          "StoreInAccountData": true
        }
      ]
    }
  ],
  "UniqueFieldNames": []
}